(define appname  "app")

(define libver   "958")
(define libpath  "../libpetite")
(define objcopy  "objcopy")
(define cflags   "-O2")
(define ldflags  "")
(define libs     "")
(define objs     "")
(define objmain  #f)
(define c-init   #f)
(define static   #f)

(define cc       "cl")
(define ld       "link")
(define Btype    "pe")
(define Bendian  "")
(define Bmarch   "i386:")
(define Barch    "x86-64")
(define bootfile "app.boot")
(define src.ss  (string-append appname ".ss"))
(define src.so  (string-append appname ".so"))
(define src.obj (string-append appname ".obj"))
(define app.exe (string-append appname ".exe"))
(define syslibs "rpcrt4.lib ole32.lib advapi32.lib user32.lib")
(define show (lambda args
  (apply printf args) (flush-output-port)))
(define command (lambda args
  (let ([cmd (apply format args)])
    (unless (zero? (system cmd)) (error 'command (string-append "\n" cmd))))))

(set! cflags (string-append cflags " -nologo -MD -Zi"))
(set! ldflags (string-append ldflags
    (if static " -ignore:4006" "")
    " -nologo -LIBPATH:" libpath))
(set! libs (string-append libs (if static
    (format " petite.lib csv~amd.lib ~a" libver syslibs)
    " libpetite.lib")))
(or objmain
  (set! objmain
    (if c-init (begin
      (command "~a -c ~a -D__BOOT__=app_boot -D__INIT__=~a -I~a ~a/main.c"
        cc cflags c-init libpath libpath) "main.obj")
      (string-append libpath "/main.obj"))))

(parameterize ([optimize-level 3] [debug-level 0])
  (compile-program src.ss))
(show "making boot file ........ ")
(make-boot-file bootfile '("petite") src.so)
(show "~a~%" bootfile)
(show "making object file ...... ")
(command "~a -Ibinary -O~a-~a~a -B~a~a ~a ~a"
  objcopy Btype Bendian Barch Bmarch Barch bootfile src.obj)
(show "~a~%" src.obj)
(show "linking executable ...... ")
(command "~a ~a ~a ~a ~a ~a -out:~a"
  ld ldflags libs objmain objs src.obj app.exe)
(show "~a~%" app.exe)
